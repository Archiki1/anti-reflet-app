import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# --- Title ---
st.title("üß™ Simulation de R√©flectance : Couches Minces Anti-reflets")
st.markdown("""
Cette application simule la **r√©flectance d'une couche mince** entre deux milieux transparents,
en fonction de la **longueur d'onde** de la lumi√®re incidente.

Elle repose sur le principe d‚Äôinterf√©rence des ondes lumineuses r√©fl√©chies aux interfaces.
""")

# --- Explanation of the physics ---
with st.expander("üìò Explication du mod√®le physique"):
    st.markdown(r"""
**Hypoth√®ses :**  
- Incidence normale  
- Milieux transparents (pas d‚Äôabsorption)  
- Une seule couche mince

**Formules utilis√©es :**

- Coefficients de Fresnel :  
  $r_{01} = \dfrac{n_0 - n_1}{n_0 + n_1}$  
  $r_{12} = \dfrac{n_1 - n_2}{n_1 + n_2}$

- Diff√©rence de phase :  
  $\Delta = \dfrac{2 \pi n_1 d}{\lambda}$

- R√©flectance totale :  
  $r = \dfrac{r_{01} + r_{12} e^{2i \Delta}}{1 + r_{01} r_{12} e^{2i \Delta}}$  
  $R = |r|^2$
""")

# --- Sidebar user inputs ---
st.sidebar.header("üéõ Param√®tres du syst√®me optique")
n0 = st.sidebar.number_input("Indice du milieu incident (n‚ÇÄ)", value=1.0, min_value=1.0, format="%.2f")
n1 = st.sidebar.number_input("Indice de la couche mince (n‚ÇÅ)", value=1.38, min_value=1.0, format="%.2f")
n2 = st.sidebar.number_input("Indice du substrat (n‚ÇÇ)", value=1.52, min_value=1.0, format="%.2f")
d = st.sidebar.slider("√âpaisseur de la couche mince (nm)", 0, 1000, 100, step=10)

# --- Convert thickness to meters ---
d_m = d * 1e-9

# --- Define wavelength range ---
wavelengths = np.linspace(400, 700, 500)  # in nanometers
wavelengths_m = wavelengths * 1e-9        # in meters

# --- Function to compute reflectance ---
def compute_reflectance(n0, n1, n2, d, wavelength):
    r01 = (n0 - n1) / (n0 + n1)
    r12 = (n1 - n2) / (n1 + n2)
    delta = (2 * np.pi * n1 * d) / wavelength
    numerator = r01 + r12 * np.exp(2j * delta)
    denominator = 1 + r01 * r12 * np.exp(2j * delta)
    r = numerator / denominator
    R = np.abs(r) ** 2
    return R

# --- Calculate reflectance ---
R = compute_reflectance(n0, n1, n2, d_m, wavelengths_m)

# --- Plot ---
fig, ax = plt.subplots()
ax.plot(wavelengths, R * 100, color='blue')
ax.set_xlabel("Longueur d'onde (nm)")
ax.set_ylabel("R√©flectance (%)")
ax.set_title("R√©flectance en fonction de la longueur d'onde")
ax.grid(True)
st.pyplot(fig)

# --- Observations and tips ---
st.markdown("### üìä Observations")
st.markdown(f"""
- √âpaisseur actuelle : **{d} nm**  
- La r√©flectance varie selon la **longueur d‚Äôonde** en raison des interf√©rences constructives/destructives.  
- Pour un anti-reflet optimal √† une longueur d'onde donn√©e $\lambda_0$, on utilise :  
  $d = \\dfrac{{\lambda_0}}{{4 n_1}}$
""")

# --- Footer ---
st.markdown("---")
st.markdown("üßë‚Äçüî¨ *D√©velopp√© avec Streamlit pour l'√©tude des interf√©rences optiques.*")
